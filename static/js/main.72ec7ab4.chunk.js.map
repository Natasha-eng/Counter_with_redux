{"version":3,"sources":["store/counterReducer.tsx","store/state.ts","utils/LocaleStorageUtils.ts","Counter.tsx","StartInput.tsx","MaxInput.tsx","App.tsx","index.tsx"],"names":["ACTIONS_TYPE","initialState","maxInputValue","minInputValue","counterValue","instruction","isSetBtnDisabled","isIncBtnDisabled","isResetBtnDisabled","counterMode","changeMinInputValueAC","type","CHANGE_MIN_INPUT_VALUE","changeMaxInputValueAC","CHANGE_MAX_INPUT_VALUE","setInstructionAC","SET_INSTRUCTION","disableBtnInc","value","DISABLE_BTN_INC","disableSetBtn","DISABLE_SET_BTN","disableResetBtnAC","DISABLE_RESET_BTN","changeCounterModeAC","CHANGE_COUNTER_MODE","rootReducer","combineReducers","counter","state","action","SET_MAX_INPUT_VALUES","SET_MIN_INPUT_VALUES","INCREMENT_COUNTER_VALUE","RESET_COUNTER_VALUE","persistedStateString","localStorage","getItem","JSON","parse","store","createStore","serializedState","err","loadState","subscribe","stringify","setItem","saveState","getState","Counter","React","memo","props","counterStyle","maxValue","startValue","className","StartInput","startInputMistake","title","TextField","label","variant","onChange","e","changeStartValue","currentTarget","autoFocus","MaxInput","maxInputMistake","changeMaxValue","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","alignItems","flexDirection","height","width","background","boxShadow","margin","spacing","App","dispatch","useDispatch","useSelector","classes","useCallback","newValue","changeMode","increment","useEffect","reset","Container","fixed","style","Box","Paper","elevation","Button","size","disabled","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72ec7ab4.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_MIN_INPUT_VALUE = 'CHANGE_MIN_INPUT_VALUE',\r\n    CHANGE_MAX_INPUT_VALUE = 'CHANGE_MAX_INPUT_VALUE',\r\n    SET_VALUES = 'SET_VALUES',\r\n    INCREMENT_COUNTER_VALUE = 'INCREMENT_COUNTER_VALUE',\r\n    RESET_COUNTER_VALUE = 'RESET_COUNTER_VALUE',\r\n    DISABLE_BTN_INC = 'DISABLE_BTN_INC',\r\n    DISABLE_SET_BTN = 'DISABLE_SET_BTN',\r\n    DISABLE_RESET_BTN = 'DISABLE_RESET_BTN',\r\n    SET_INSTRUCTION = 'SET_INSTRUCTION',\r\n    SET_MIN_INPUT_VALUES = 'SET_MIN_INPUT_VALUES',\r\n    SET_MAX_INPUT_VALUES = 'SET_MAX_INPUT_VALUES',\r\n    CHANGE_COUNTER_MODE = 'CHANGE_COUNTER_MODE',\r\n}\r\n\r\nconst initialState = {\r\n    maxInputValue: 5,\r\n    minInputValue: 0,\r\n    counterValue: 0,\r\n    instruction: \"\",\r\n    isSetBtnDisabled: false,\r\n    isIncBtnDisabled: false,\r\n    isResetBtnDisabled: false,\r\n    counterMode: true\r\n}\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.CHANGE_MIN_INPUT_VALUE: {\r\n            return {\r\n                ...state,\r\n                minInputValue: action.minInputValue,\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.CHANGE_MAX_INPUT_VALUE: {\r\n            return {\r\n                ...state,\r\n                maxInputValue: action.maxInputValue\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_MAX_INPUT_VALUES: {\r\n            return {\r\n                ...state,\r\n                maxInputValue: state.maxInputValue\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.SET_MIN_INPUT_VALUES: {\r\n            return {\r\n                ...state,\r\n                counterValue: state.minInputValue\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.INCREMENT_COUNTER_VALUE: {\r\n            return {\r\n                ...state,\r\n                counterValue: 1 + state.counterValue\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.RESET_COUNTER_VALUE: {\r\n            return {\r\n                ...state,\r\n                counterValue: state.minInputValue,\r\n                isIncBtnDisabled: action.isIncBtnDisabled\r\n            }\r\n        }\r\n\r\n        case ACTIONS_TYPE.DISABLE_BTN_INC:\r\n            return {\r\n                ...state,\r\n                isIncBtnDisabled: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.DISABLE_RESET_BTN:\r\n            return {\r\n                ...state,\r\n                isResetBtnDisabled: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.DISABLE_SET_BTN:\r\n            return {\r\n                ...state,\r\n                isSetBtnDisabled: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.SET_INSTRUCTION:\r\n            return {\r\n                ...state,\r\n                instruction: action.instruction\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_COUNTER_MODE:\r\n            return {\r\n                ...state,\r\n                counterMode: action.counterMode\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const changeMinInputValueAC = (minInputValue: number): changeMinInputValueActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_MIN_INPUT_VALUE,\r\n        minInputValue\r\n    }\r\n}\r\n\r\nexport const changeMaxInputValueAC = (maxInputValue: number): changeMaxInputValueActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_MAX_INPUT_VALUE,\r\n        maxInputValue\r\n    }\r\n}\r\n\r\nexport const setMinInputValueAC = (): setMinInputValueType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MIN_INPUT_VALUES\r\n    }\r\n}\r\n\r\nexport const setMaxInputValueAC = (): setMaxInputValueType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_MAX_INPUT_VALUES\r\n    }\r\n}\r\n\r\nexport const setInstructionAC = (instruction: string): setInstructionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.SET_INSTRUCTION,\r\n        instruction\r\n    }\r\n}\r\n\r\nexport const IncrementCounterValueAC = (): IncrementCounterValueActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.INCREMENT_COUNTER_VALUE,\r\n    }\r\n}\r\n\r\nexport const resetCounterValueAC = (isIncBtnDisabled: boolean): resetCounterValueActionType => {\r\n    return {\r\n        type: ACTIONS_TYPE.RESET_COUNTER_VALUE,\r\n        isIncBtnDisabled\r\n    }\r\n}\r\n\r\nexport const disableBtnInc = (value: boolean): DisableBtnType => {\r\n    return {\r\n        type: ACTIONS_TYPE.DISABLE_BTN_INC,\r\n        value\r\n    }\r\n}\r\n\r\nexport const disableSetBtn = (value: boolean): DisableSetBtnType => {\r\n    return {\r\n        type: ACTIONS_TYPE.DISABLE_SET_BTN,\r\n        value\r\n    }\r\n}\r\n\r\nexport const disableResetBtnAC = (value: boolean): DisableResetBtnType => {\r\n    return {\r\n        type: ACTIONS_TYPE.DISABLE_RESET_BTN,\r\n        value\r\n    }\r\n}\r\n\r\nexport const changeCounterModeAC = (counterMode: boolean): changeCounterModeType => {\r\n    return {\r\n        type: ACTIONS_TYPE.CHANGE_COUNTER_MODE,\r\n        counterMode\r\n    }\r\n}\r\n\r\n//types\r\n\r\nexport type InitialStateType = {\r\n    maxInputValue: number,\r\n    minInputValue: number,\r\n    counterValue: number,\r\n    instruction: string,\r\n    isSetBtnDisabled: boolean,\r\n    isIncBtnDisabled: boolean,\r\n    isResetBtnDisabled: boolean,\r\n    counterMode: boolean\r\n}\r\n\r\ntype ActionsType = changeMinInputValueActionType |\r\n    changeMaxInputValueActionType |\r\n    setValueActionType |\r\n    IncrementCounterValueActionType |\r\n    resetCounterValueActionType | DisableBtnType |\r\n    DisableResetBtnType | DisableSetBtnType\r\n    | setInstructionType | setMinInputValueType |\r\n    setMaxInputValueType | changeCounterModeType\r\n\r\nexport type changeMinInputValueActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_MIN_INPUT_VALUE\r\n    minInputValue: number\r\n}\r\n\r\n\r\nexport type changeMaxInputValueActionType = {\r\n    type: ACTIONS_TYPE.CHANGE_MAX_INPUT_VALUE\r\n    maxInputValue: number\r\n}\r\n\r\nexport type setValueActionType = {\r\n    type: ACTIONS_TYPE.SET_VALUES\r\n}\r\n\r\nexport type setMinInputValueType = {\r\n    type: ACTIONS_TYPE.SET_MIN_INPUT_VALUES\r\n}\r\n\r\nexport type setMaxInputValueType = {\r\n    type: ACTIONS_TYPE.SET_MAX_INPUT_VALUES\r\n}\r\n\r\n\r\nexport type IncrementCounterValueActionType = {\r\n    type: ACTIONS_TYPE.INCREMENT_COUNTER_VALUE\r\n}\r\n\r\nexport type resetCounterValueActionType = {\r\n    type: ACTIONS_TYPE.RESET_COUNTER_VALUE\r\n    isIncBtnDisabled: boolean\r\n}\r\n\r\n\r\nexport type DisableBtnType = {\r\n    type: ACTIONS_TYPE.DISABLE_BTN_INC\r\n    value: boolean\r\n}\r\n\r\n\r\nexport type DisableSetBtnType = {\r\n    type: ACTIONS_TYPE.DISABLE_SET_BTN\r\n    value: boolean\r\n}\r\n\r\n\r\nexport type DisableResetBtnType = {\r\n    type: ACTIONS_TYPE.DISABLE_RESET_BTN\r\n    value: boolean\r\n}\r\n\r\nexport type setInstructionType = {\r\n    type: ACTIONS_TYPE.SET_INSTRUCTION,\r\n    instruction: string\r\n}\r\n\r\nexport type changeCounterModeType = {\r\n    type: ACTIONS_TYPE.CHANGE_COUNTER_MODE,\r\n    counterMode: boolean\r\n}\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {loadState, saveState} from \"../utils/LocaleStorageUtils\";\r\n\r\n\r\nconst rootReducer = combineReducers(\r\n    {counter: counterReducer})\r\n\r\nlet preloadedState\r\nconst persistedStateString = localStorage.getItem(\"state\")\r\nif (persistedStateString) {\r\n    preloadedState = JSON.parse(persistedStateString)\r\n}\r\n\r\nexport const store = createStore(rootReducer, loadState());\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter: store.getState().counter\r\n    })\r\n    localStorage.setItem(\"state\", JSON.stringify(store.getState()))\r\n})\r\n\r\n//types\r\nexport type RootStateType = ReturnType<typeof rootReducer>;","import {RootStateType} from \"../store/state\";\r\n\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (!serializedState ) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import React from \"react\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number;\r\n    increment: () => void\r\n    maxValue: number\r\n    startValue: number\r\n    reset: () => void\r\n    instruction: string\r\n}\r\n\r\nexport const Counter = React.memo((props: CounterPropsType) =>{\r\n    const disableValue = props.counter === props.maxValue || props.startValue < 0 || props.startValue >= props.maxValue;\r\n    const counterStyle = (disableValue) ? \"incorrectCounterStyle\" : \"CounterStyle\";\r\n\r\n    return (\r\n        <div>\r\n            <div className={counterStyle}>{props.instruction || props.counter} </div>\r\n            <div className=\"CounterButtons\">\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype InputPropsType = {\r\n    changeStartValue: (newValue: number) => void\r\n    startValue: number\r\n    maxValue: number\r\n    title: string\r\n}\r\n\r\nexport const StartInput = React.memo((props: InputPropsType) => {\r\n    const onStartInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(+e.currentTarget.value);\r\n    }\r\n    let startInputMistake = props.startValue < 0 || props.maxValue <= props.startValue ? \"StartMistakeInput\" : \"Input\";\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <TextField label=\"Number\" variant=\"filled\" className={startInputMistake} type={\"number\"} onChange={onStartInputChangeHandler}\r\n                                     value={props.startValue}\r\n                                     autoFocus/>\r\n\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype InputProps = {\r\n    changeMaxValue: (newValue: number) => void\r\n    maxValue: number\r\n    startValue: number\r\n    title: string\r\n}\r\n\r\nexport const MaxInput = React.memo((props: InputProps) => {\r\n\r\n    const onMaxInputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(+e.currentTarget.value);\r\n    }\r\n\r\n    let maxInputMistake = props.maxValue < 0 || props.maxValue <= props.startValue ? \"MaxMistakeInput\" : \"Input\";\r\n\r\n    return (\r\n        <div className=\"input\">\r\n\r\n            {props.title} <TextField label=\"Number\" variant=\"filled\" className={maxInputMistake} type={\"number\"}\r\n                                     onChange={onMaxInputChangeHandler} value={props.maxValue}/>\r\n\r\n        </div>\r\n    );\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {StartInput} from \"./StartInput\";\nimport {MaxInput} from \"./MaxInput\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Box, Button, Container, makeStyles, Paper} from \"@material-ui/core\";\nimport {RootStateType} from \"./store/state\";\nimport {\n    changeCounterModeAC,\n    changeMaxInputValueAC, changeMinInputValueAC,\n    disableBtnInc, disableResetBtnAC,\n    disableSetBtn, IncrementCounterValueAC,\n    InitialStateType, resetCounterValueAC,\n    setInstructionAC, setMaxInputValueAC, setMinInputValueAC\n} from \"./store/counterReducer\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        height: \"100%\",\n        width: \"100%\",\n        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n        boxShadow: '0 3px 5px 2px rgba(33, 203, 243, .3)',\n        '& > *': {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nexport function App() {\n\n    const dispatch = useDispatch();\n    const state = useSelector<RootStateType, InitialStateType>(state => state.counter);\n\n    const classes = useStyles();\n\n    const changeMaxValue = useCallback((newValue: number) => {\n\n        let incorrectValue = state.minInputValue >= newValue;\n\n        if (incorrectValue) {\n            dispatch(changeMaxInputValueAC(newValue));\n            dispatch(setInstructionAC(\"Incorrect value\"));\n            dispatch(disableBtnInc(true));\n            dispatch(disableSetBtn(true));\n            dispatch(disableResetBtnAC(true));\n\n\n        } else {\n            dispatch(changeMaxInputValueAC(newValue));\n            dispatch(setInstructionAC(\"Set counter value\"));\n            dispatch(disableBtnInc(true));\n            dispatch(disableSetBtn(false));\n            dispatch(disableResetBtnAC(true));\n        }\n    }, [dispatch])\n\n    const changeStartValue = useCallback((newValue: number) => {\n\n        let incorrectValue = newValue < 0 || newValue >= state.maxInputValue;\n\n        if (incorrectValue) {\n            dispatch(changeMinInputValueAC(newValue));\n            dispatch(setInstructionAC(\"Incorrect value\"));\n            dispatch(disableBtnInc(true));\n            dispatch(disableSetBtn(true));\n            dispatch(disableResetBtnAC(true));\n\n        } else {\n            dispatch(changeMinInputValueAC(newValue));\n            dispatch(setInstructionAC(\"Set counter value\"));\n            dispatch(disableBtnInc(true));\n            dispatch(disableSetBtn(false));\n            dispatch(disableResetBtnAC(true));\n        }\n    }, [dispatch])\n\n    const setValue = () => {\n        dispatch(setMinInputValueAC())\n        dispatch(setMaxInputValueAC())\n        dispatch(setInstructionAC(\"\"));\n        dispatch(disableBtnInc(false));\n        dispatch(disableResetBtnAC(false));\n        dispatch(changeCounterModeAC(true))\n    }\n\n    const changeMode = useCallback(() => {\n        dispatch(changeCounterModeAC(false))\n    }, [dispatch])\n\n    const increment = useCallback(() => {\n        dispatch(IncrementCounterValueAC());\n    }, [dispatch])\n\n    useEffect(() => {\n        if (state.maxInputValue === state.counterValue) {\n            dispatch(disableBtnInc(true));\n        }\n    }, [state.maxInputValue, state.counterValue])\n\n    const reset = useCallback(() => {\n        dispatch(resetCounterValueAC(false));\n    }, [dispatch])\n\n\n    return (\n        <Container fixed style={{height: \"100vh\"}}>\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" style={{height: \"100vh\"}}>\n                {!state.counterMode && <Box style={{height: \"50%\", width: \"40%\", margin: \"20px\"}}>\n                    <Paper elevation={4} className={classes.root}>\n                        <MaxInput changeMaxValue={changeMaxValue}\n                                  maxValue={state.maxInputValue} startValue={state.minInputValue}\n                                  title={\"Max Input:\"}/>\n\n                        <StartInput changeStartValue={changeStartValue} title={\"Min Input:\"}\n                                    startValue={state.minInputValue}\n                                    maxValue={state.maxInputValue}/>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={state.isSetBtnDisabled}\n                                onClick={setValue}>Set</Button>\n                    </Paper>\n                </Box>}\n\n                {state.counterMode && <Box style={{height: \"50%\", width: \"40%\", margin: \"20px\"}}>\n                    <Paper elevation={4} className={classes.root}>\n                        <Counter counter={state.counterValue} increment={increment} startValue={state.minInputValue}\n                                 maxValue={state.maxInputValue}\n                                 reset={reset} instruction={state.instruction}/>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={state.isIncBtnDisabled}\n                                onClick={increment}>inc</Button>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={state.isResetBtnDisabled}\n                                onClick={reset}>reset</Button>\n\n                        <Button variant={\"contained\"} size={\"small\"} disabled={state.isSetBtnDisabled}\n                                onClick={changeMode}>Set</Button>\n                    </Paper>\n                </Box>}\n            </Box>\n        </Container>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/state\";\nimport {App} from \"./App\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}